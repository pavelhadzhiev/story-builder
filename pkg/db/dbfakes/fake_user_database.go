// Code generated by counterfeiter. DO NOT EDIT.
package dbfakes

import (
	"sync"

	"github.com/pavelhadzhiev/story-builder/pkg/db"
)

type FakeUserDatabase struct {
	InitializeDBStub        func() error
	initializeDBMutex       sync.RWMutex
	initializeDBArgsForCall []struct{}
	initializeDBReturns     struct {
		result1 error
	}
	initializeDBReturnsOnCall map[int]struct {
		result1 error
	}
	CloseDBStub          func()
	closeDBMutex         sync.RWMutex
	closeDBArgsForCall   []struct{}
	LoginUserStub        func(username, password string) error
	loginUserMutex       sync.RWMutex
	loginUserArgsForCall []struct {
		username string
		password string
	}
	loginUserReturns struct {
		result1 error
	}
	loginUserReturnsOnCall map[int]struct {
		result1 error
	}
	RegisterUserStub        func(username, password string) error
	registerUserMutex       sync.RWMutex
	registerUserArgsForCall []struct {
		username string
		password string
	}
	registerUserReturns struct {
		result1 error
	}
	registerUserReturnsOnCall map[int]struct {
		result1 error
	}
	UserExistsStub        func(username string) (bool, error)
	userExistsMutex       sync.RWMutex
	userExistsArgsForCall []struct {
		username string
	}
	userExistsReturns struct {
		result1 bool
		result2 error
	}
	userExistsReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUserDatabase) InitializeDB() error {
	fake.initializeDBMutex.Lock()
	ret, specificReturn := fake.initializeDBReturnsOnCall[len(fake.initializeDBArgsForCall)]
	fake.initializeDBArgsForCall = append(fake.initializeDBArgsForCall, struct{}{})
	fake.recordInvocation("InitializeDB", []interface{}{})
	fake.initializeDBMutex.Unlock()
	if fake.InitializeDBStub != nil {
		return fake.InitializeDBStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.initializeDBReturns.result1
}

func (fake *FakeUserDatabase) InitializeDBCallCount() int {
	fake.initializeDBMutex.RLock()
	defer fake.initializeDBMutex.RUnlock()
	return len(fake.initializeDBArgsForCall)
}

func (fake *FakeUserDatabase) InitializeDBReturns(result1 error) {
	fake.InitializeDBStub = nil
	fake.initializeDBReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserDatabase) InitializeDBReturnsOnCall(i int, result1 error) {
	fake.InitializeDBStub = nil
	if fake.initializeDBReturnsOnCall == nil {
		fake.initializeDBReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.initializeDBReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserDatabase) CloseDB() {
	fake.closeDBMutex.Lock()
	fake.closeDBArgsForCall = append(fake.closeDBArgsForCall, struct{}{})
	fake.recordInvocation("CloseDB", []interface{}{})
	fake.closeDBMutex.Unlock()
	if fake.CloseDBStub != nil {
		fake.CloseDBStub()
	}
}

func (fake *FakeUserDatabase) CloseDBCallCount() int {
	fake.closeDBMutex.RLock()
	defer fake.closeDBMutex.RUnlock()
	return len(fake.closeDBArgsForCall)
}

func (fake *FakeUserDatabase) LoginUser(username string, password string) error {
	fake.loginUserMutex.Lock()
	ret, specificReturn := fake.loginUserReturnsOnCall[len(fake.loginUserArgsForCall)]
	fake.loginUserArgsForCall = append(fake.loginUserArgsForCall, struct {
		username string
		password string
	}{username, password})
	fake.recordInvocation("LoginUser", []interface{}{username, password})
	fake.loginUserMutex.Unlock()
	if fake.LoginUserStub != nil {
		return fake.LoginUserStub(username, password)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.loginUserReturns.result1
}

func (fake *FakeUserDatabase) LoginUserCallCount() int {
	fake.loginUserMutex.RLock()
	defer fake.loginUserMutex.RUnlock()
	return len(fake.loginUserArgsForCall)
}

func (fake *FakeUserDatabase) LoginUserArgsForCall(i int) (string, string) {
	fake.loginUserMutex.RLock()
	defer fake.loginUserMutex.RUnlock()
	return fake.loginUserArgsForCall[i].username, fake.loginUserArgsForCall[i].password
}

func (fake *FakeUserDatabase) LoginUserReturns(result1 error) {
	fake.LoginUserStub = nil
	fake.loginUserReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserDatabase) LoginUserReturnsOnCall(i int, result1 error) {
	fake.LoginUserStub = nil
	if fake.loginUserReturnsOnCall == nil {
		fake.loginUserReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.loginUserReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserDatabase) RegisterUser(username string, password string) error {
	fake.registerUserMutex.Lock()
	ret, specificReturn := fake.registerUserReturnsOnCall[len(fake.registerUserArgsForCall)]
	fake.registerUserArgsForCall = append(fake.registerUserArgsForCall, struct {
		username string
		password string
	}{username, password})
	fake.recordInvocation("RegisterUser", []interface{}{username, password})
	fake.registerUserMutex.Unlock()
	if fake.RegisterUserStub != nil {
		return fake.RegisterUserStub(username, password)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.registerUserReturns.result1
}

func (fake *FakeUserDatabase) RegisterUserCallCount() int {
	fake.registerUserMutex.RLock()
	defer fake.registerUserMutex.RUnlock()
	return len(fake.registerUserArgsForCall)
}

func (fake *FakeUserDatabase) RegisterUserArgsForCall(i int) (string, string) {
	fake.registerUserMutex.RLock()
	defer fake.registerUserMutex.RUnlock()
	return fake.registerUserArgsForCall[i].username, fake.registerUserArgsForCall[i].password
}

func (fake *FakeUserDatabase) RegisterUserReturns(result1 error) {
	fake.RegisterUserStub = nil
	fake.registerUserReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserDatabase) RegisterUserReturnsOnCall(i int, result1 error) {
	fake.RegisterUserStub = nil
	if fake.registerUserReturnsOnCall == nil {
		fake.registerUserReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.registerUserReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserDatabase) UserExists(username string) (bool, error) {
	fake.userExistsMutex.Lock()
	ret, specificReturn := fake.userExistsReturnsOnCall[len(fake.userExistsArgsForCall)]
	fake.userExistsArgsForCall = append(fake.userExistsArgsForCall, struct {
		username string
	}{username})
	fake.recordInvocation("UserExists", []interface{}{username})
	fake.userExistsMutex.Unlock()
	if fake.UserExistsStub != nil {
		return fake.UserExistsStub(username)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.userExistsReturns.result1, fake.userExistsReturns.result2
}

func (fake *FakeUserDatabase) UserExistsCallCount() int {
	fake.userExistsMutex.RLock()
	defer fake.userExistsMutex.RUnlock()
	return len(fake.userExistsArgsForCall)
}

func (fake *FakeUserDatabase) UserExistsArgsForCall(i int) string {
	fake.userExistsMutex.RLock()
	defer fake.userExistsMutex.RUnlock()
	return fake.userExistsArgsForCall[i].username
}

func (fake *FakeUserDatabase) UserExistsReturns(result1 bool, result2 error) {
	fake.UserExistsStub = nil
	fake.userExistsReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeUserDatabase) UserExistsReturnsOnCall(i int, result1 bool, result2 error) {
	fake.UserExistsStub = nil
	if fake.userExistsReturnsOnCall == nil {
		fake.userExistsReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.userExistsReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeUserDatabase) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.initializeDBMutex.RLock()
	defer fake.initializeDBMutex.RUnlock()
	fake.closeDBMutex.RLock()
	defer fake.closeDBMutex.RUnlock()
	fake.loginUserMutex.RLock()
	defer fake.loginUserMutex.RUnlock()
	fake.registerUserMutex.RLock()
	defer fake.registerUserMutex.RUnlock()
	fake.userExistsMutex.RLock()
	defer fake.userExistsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeUserDatabase) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ db.UserDatabase = new(FakeUserDatabase)
